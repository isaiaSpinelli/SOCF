
D:/HEIG/S6/SOCF/Laboratoires/Labo5/axi4lite/axi4lite/soft/projWindow/labo5.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	34 05 00 00 38 05 00 00 3c 05 00 00 40 05 00 00     4...8...<...@...
  30:	44 05 00 00 88 09 00 00 04 05 00 00 48 05 00 00     D...........H...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000212 	bl	924 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000a80 	.word	0x00000a80

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000eb8 	.word	0x00000eb8

00000124 <__cs3_heap_start_ptr>:
 124:	00000ee8 	.word	0x00000ee8

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000ec0 	.word	0x00000ec0
 170:	00000ec3 	.word	0x00000ec3
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000ec0 	.word	0x00000ec0
 1bc:	00000ec0 	.word	0x00000ec0
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000ec0 	.word	0x00000ec0
 200:	00000000 	.word	0x00000000
 204:	00000a14 	.word	0x00000a14

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000a14 	.word	0x00000a14
 250:	00000ec4 	.word	0x00000ec4
 254:	00000a80 	.word	0x00000a80
 258:	00000000 	.word	0x00000000

0000025c <main>:
void set_A9_IRQ_stack (void);
void config_GIC (void);
void config_KEYs (void);
void enable_A9_interrupts (void);

int main(void){
 25c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 260:	e24dd010 	sub	sp, sp, #16
	
	// tableau de converssion		  0 	1	  2		3	 4		5	 6	   7      8     9    a      b    c      d     e    f
	char tab_dec_to_hex_7seg[16] = {0x40, 0xF9, 0x24, 0x30, 0x19, 0x12, 0x02, 0xF8, 0x00, 0x10, 0x08, 0x03, 0x27, 0x21, 0x06, 0x0e };
 264:	e3003a18 	movw	r3, #2584	; 0xa18
 268:	e3403000 	movt	r3, #0
 26c:	e1a0c00d 	mov	r12, sp
 270:	e5930000 	ldr	r0, [r3]
 274:	e5931004 	ldr	r1, [r3, #4]
 278:	e5932008 	ldr	r2, [r3, #8]
 27c:	e593300c 	ldr	r3, [r3, #12]
 280:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
	
	int led_tmp,Seg_tmp;
	
	disable_A9_interrupts();   // disable interrupts in the A9 processor
 284:	eb0000ba 	bl	574 <disable_A9_interrupts>
	set_A9_IRQ_stack();        // initialize the stack pointer for IRQ mode
 288:	eb0000af 	bl	54c <set_A9_IRQ_stack>
	config_GIC();              // configure the general interrupt controller
 28c:	eb0000cd 	bl	5c8 <config_GIC>
	config_KEYs();             // configure KEYs to generate interrupts
 290:	eb0000ba 	bl	580 <config_KEYs>
	enable_A9_interrupts();    // enable interrupts in the A9 processor
 294:	eb0000b3 	bl	568 <enable_A9_interrupts>

	/* INTI */
	AXI_HEX5 = 0x40;
 298:	e3a03000 	mov	r3, #0
 29c:	e34f3f20 	movt	r3, #65312	; 0xff20
 2a0:	e3a02040 	mov	r2, #64	; 0x40
 2a4:	e5832450 	str	r2, [r3, #1104]	; 0x450
	AXI_HEX4 = 0xF9;
 2a8:	e3a020f9 	mov	r2, #249	; 0xf9
 2ac:	e5832440 	str	r2, [r3, #1088]	; 0x440
	AXI_HEX3 = 0x24;
 2b0:	e3a02024 	mov	r2, #36	; 0x24
 2b4:	e5832430 	str	r2, [r3, #1072]	; 0x430
	AXI_HEX2 = 0x30;
 2b8:	e3a02030 	mov	r2, #48	; 0x30
 2bc:	e5832420 	str	r2, [r3, #1056]	; 0x420
	AXI_HEX1 = 0x19;
 2c0:	e3a02019 	mov	r2, #25
 2c4:	e5832410 	str	r2, [r3, #1040]	; 0x410
	AXI_HEX0 = 0x02;
 2c8:	e3a02002 	mov	r2, #2
 2cc:	e5832400 	str	r2, [r3, #1024]	; 0x400

	AXI_LEDS = AXI_SWITCHES;
 2d0:	e5932300 	ldr	r2, [r3, #768]	; 0x300
 2d4:	e5832100 	str	r2, [r3, #256]	; 0x100

	unsigned int cst = AXI_REG_CONST;
 2d8:	e5932000 	ldr	r2, [r3]
	
	// Masque le bouton key3
	AXI_INT_MASK = KEY3;
 2dc:	e3a01008 	mov	r1, #8
 2e0:	e5831208 	str	r1, [r3, #520]	; 0x208
		if ((AXI_KEYS & KEY0) == 0) {
			// l'états des switches est copiés sur les LEDs.
			AXI_LEDS = AXI_SWITCHES;
			// Les afficheurs HEX5 à HEX0 affichent en hexadécimal les bits 23 à 0 de la constante définie dans l’IP.
			AXI_HEX0 = tab_dec_to_hex_7seg[cst & 0xF];
			AXI_HEX1 = tab_dec_to_hex_7seg[(cst>>4)  & 0xF];
 2e4:	e7e34252 	ubfx	r4, r2, #4, #4
			AXI_HEX2 = tab_dec_to_hex_7seg[(cst>>8)  & 0xF];
 2e8:	e7e3e452 	ubfx	lr, r2, #8, #4
			AXI_HEX3 = tab_dec_to_hex_7seg[(cst>>12) & 0xF];
 2ec:	e7e3c652 	ubfx	r12, r2, #12, #4
			AXI_HEX4 = tab_dec_to_hex_7seg[(cst>>16) & 0xF];
 2f0:	e7e30852 	ubfx	r0, r2, #16, #4
			AXI_HEX5 = tab_dec_to_hex_7seg[(cst>>20) & 0xF];
 2f4:	e7e31a52 	ubfx	r1, r2, #20, #4
	AXI_INT_MASK = KEY3;
	
    
    while(1){
		/* Appuie sur KEY 0*/
		if ((AXI_KEYS & KEY0) == 0) {
 2f8:	e3a03000 	mov	r3, #0
 2fc:	e34f3f20 	movt	r3, #65312	; 0xff20
			// l'états des switches est copiés sur les LEDs.
			AXI_LEDS = AXI_SWITCHES;
			// Les afficheurs HEX5 à HEX0 affichent en hexadécimal les bits 23 à 0 de la constante définie dans l’IP.
			AXI_HEX0 = tab_dec_to_hex_7seg[cst & 0xF];
 300:	e202200f 	and	r2, r2, #15
 304:	e28d6010 	add	r6, sp, #16
 308:	e0865002 	add	r5, r6, r2
			AXI_HEX1 = tab_dec_to_hex_7seg[(cst>>4)  & 0xF];
 30c:	e0864004 	add	r4, r6, r4
			AXI_HEX2 = tab_dec_to_hex_7seg[(cst>>8)  & 0xF];
 310:	e086e00e 	add	lr, r6, lr
			AXI_HEX3 = tab_dec_to_hex_7seg[(cst>>12) & 0xF];
 314:	e086c00c 	add	r12, r6, r12
			AXI_HEX4 = tab_dec_to_hex_7seg[(cst>>16) & 0xF];
 318:	e0860000 	add	r0, r6, r0
			AXI_HEX5 = tab_dec_to_hex_7seg[(cst>>20) & 0xF];
 31c:	e0861001 	add	r1, r6, r1
			AXI_HEX3 = ~tab_dec_to_hex_7seg[(cst>>12) & 0xF];
			AXI_HEX4 = ~tab_dec_to_hex_7seg[(cst>>16) & 0xF];
			AXI_HEX5 = ~tab_dec_to_hex_7seg[(cst>>20) & 0xF];

		// Si le bouton 2 est pressé (via ine interruption)
		} else if (irqKey2) {
 320:	e3006edc 	movw	r6, #3804	; 0xedc
 324:	e3406000 	movt	r6, #0
			AXI_HEX5 = Seg_tmp;
			
			
		// Si le bouton 3 est pressé (via ine interruption)
		} else if (irqKey3) {
			irqKey3 = 0;
 328:	e3a07000 	mov	r7, #0
	AXI_INT_MASK = KEY3;
	
    
    while(1){
		/* Appuie sur KEY 0*/
		if ((AXI_KEYS & KEY0) == 0) {
 32c:	e5932200 	ldr	r2, [r3, #512]	; 0x200
 330:	e3120001 	tst	r2, #1
 334:	1a00000e 	bne	374 <main+0x118>
			// l'états des switches est copiés sur les LEDs.
			AXI_LEDS = AXI_SWITCHES;
 338:	e5932300 	ldr	r2, [r3, #768]	; 0x300
 33c:	e5832100 	str	r2, [r3, #256]	; 0x100
			// Les afficheurs HEX5 à HEX0 affichent en hexadécimal les bits 23 à 0 de la constante définie dans l’IP.
			AXI_HEX0 = tab_dec_to_hex_7seg[cst & 0xF];
 340:	e5552010 	ldrb	r2, [r5, #-16]
 344:	e5832400 	str	r2, [r3, #1024]	; 0x400
			AXI_HEX1 = tab_dec_to_hex_7seg[(cst>>4)  & 0xF];
 348:	e5542010 	ldrb	r2, [r4, #-16]
 34c:	e5832410 	str	r2, [r3, #1040]	; 0x410
			AXI_HEX2 = tab_dec_to_hex_7seg[(cst>>8)  & 0xF];
 350:	e55e2010 	ldrb	r2, [lr, #-16]
 354:	e5832420 	str	r2, [r3, #1056]	; 0x420
			AXI_HEX3 = tab_dec_to_hex_7seg[(cst>>12) & 0xF];
 358:	e55c2010 	ldrb	r2, [r12, #-16]
 35c:	e5832430 	str	r2, [r3, #1072]	; 0x430
			AXI_HEX4 = tab_dec_to_hex_7seg[(cst>>16) & 0xF];
 360:	e5502010 	ldrb	r2, [r0, #-16]
 364:	e5832440 	str	r2, [r3, #1088]	; 0x440
			AXI_HEX5 = tab_dec_to_hex_7seg[(cst>>20) & 0xF];
 368:	e5512010 	ldrb	r2, [r1, #-16]
 36c:	e5832450 	str	r2, [r3, #1104]	; 0x450
 370:	eaffffed 	b	32c <main+0xd0>
			

		/* Appuie sur KEY 1 */
		} else if ((AXI_KEYS & KEY1) == 0) {
 374:	e5932200 	ldr	r2, [r3, #512]	; 0x200
 378:	e3120002 	tst	r2, #2
 37c:	1a000015 	bne	3d8 <main+0x17c>
			//  l'états inverses des switches est copiés sur les LEDs.
			AXI_LEDS = ~AXI_SWITCHES;
 380:	e5932300 	ldr	r2, [r3, #768]	; 0x300
 384:	e1e02002 	mvn	r2, r2
 388:	e5832100 	str	r2, [r3, #256]	; 0x100
			
			// Les afficheurs HEX5 à HEX0 affichent en hexadécimal l’inverse des bits 23 à 0 de la
			// constante définie dans l’IP.
			AXI_HEX0 = ~tab_dec_to_hex_7seg[cst & 0xF];
 38c:	e5552010 	ldrb	r2, [r5, #-16]
 390:	e1e02002 	mvn	r2, r2
 394:	e5832400 	str	r2, [r3, #1024]	; 0x400
			AXI_HEX1 = ~tab_dec_to_hex_7seg[(cst>>4)  & 0xF];
 398:	e5542010 	ldrb	r2, [r4, #-16]
 39c:	e1e02002 	mvn	r2, r2
 3a0:	e5832410 	str	r2, [r3, #1040]	; 0x410
			AXI_HEX2 = ~tab_dec_to_hex_7seg[(cst>>8)  & 0xF];
 3a4:	e55e2010 	ldrb	r2, [lr, #-16]
 3a8:	e1e02002 	mvn	r2, r2
 3ac:	e5832420 	str	r2, [r3, #1056]	; 0x420
			AXI_HEX3 = ~tab_dec_to_hex_7seg[(cst>>12) & 0xF];
 3b0:	e55c2010 	ldrb	r2, [r12, #-16]
 3b4:	e1e02002 	mvn	r2, r2
 3b8:	e5832430 	str	r2, [r3, #1072]	; 0x430
			AXI_HEX4 = ~tab_dec_to_hex_7seg[(cst>>16) & 0xF];
 3bc:	e5502010 	ldrb	r2, [r0, #-16]
 3c0:	e1e02002 	mvn	r2, r2
 3c4:	e5832440 	str	r2, [r3, #1088]	; 0x440
			AXI_HEX5 = ~tab_dec_to_hex_7seg[(cst>>20) & 0xF];
 3c8:	e5512010 	ldrb	r2, [r1, #-16]
 3cc:	e1e02002 	mvn	r2, r2
 3d0:	e5832450 	str	r2, [r3, #1104]	; 0x450
 3d4:	eaffffd4 	b	32c <main+0xd0>

		// Si le bouton 2 est pressé (via ine interruption)
		} else if (irqKey2) {
 3d8:	e5962000 	ldr	r2, [r6]
 3dc:	e3520000 	cmp	r2, #0
 3e0:	0a000013 	beq	434 <main+0x1d8>
			irqKey2 = 0;
 3e4:	e5867000 	str	r7, [r6]

			/*  l’affichage des LEDs et des afficheurs 7 segments subit unerotation à droite */
			led_tmp = AXI_LEDS & 0x1;
 3e8:	e5938100 	ldr	r8, [r3, #256]	; 0x100
			AXI_LEDS = ((AXI_LEDS & 0x3ff) >> 1) | (led_tmp << 9);
 3ec:	e5932100 	ldr	r2, [r3, #256]	; 0x100
		// Si le bouton 2 est pressé (via ine interruption)
		} else if (irqKey2) {
			irqKey2 = 0;

			/*  l’affichage des LEDs et des afficheurs 7 segments subit unerotation à droite */
			led_tmp = AXI_LEDS & 0x1;
 3f0:	e2088001 	and	r8, r8, #1
			AXI_LEDS = ((AXI_LEDS & 0x3ff) >> 1) | (led_tmp << 9);
 3f4:	e7e820d2 	ubfx	r2, r2, #1, #9
 3f8:	e1822488 	orr	r2, r2, r8, lsl #9
 3fc:	e5832100 	str	r2, [r3, #256]	; 0x100
			
			Seg_tmp = AXI_HEX0;
 400:	e5932400 	ldr	r2, [r3, #1024]	; 0x400
			AXI_HEX0 = AXI_HEX1;
 404:	e5938410 	ldr	r8, [r3, #1040]	; 0x410
 408:	e5838400 	str	r8, [r3, #1024]	; 0x400
			AXI_HEX1 = AXI_HEX2;
 40c:	e5938420 	ldr	r8, [r3, #1056]	; 0x420
 410:	e5838410 	str	r8, [r3, #1040]	; 0x410
			AXI_HEX2 = AXI_HEX3;
 414:	e5938430 	ldr	r8, [r3, #1072]	; 0x430
 418:	e5838420 	str	r8, [r3, #1056]	; 0x420
			AXI_HEX3 = AXI_HEX4;
 41c:	e5938440 	ldr	r8, [r3, #1088]	; 0x440
 420:	e5838430 	str	r8, [r3, #1072]	; 0x430
			AXI_HEX4 = AXI_HEX5;
 424:	e5938450 	ldr	r8, [r3, #1104]	; 0x450
 428:	e5838440 	str	r8, [r3, #1088]	; 0x440
			AXI_HEX5 = Seg_tmp;
 42c:	e5832450 	str	r2, [r3, #1104]	; 0x450
 430:	eaffffbd 	b	32c <main+0xd0>
			
			
		// Si le bouton 3 est pressé (via ine interruption)
		} else if (irqKey3) {
 434:	e5962004 	ldr	r2, [r6, #4]
 438:	e3520000 	cmp	r2, #0
 43c:	0affffba 	beq	32c <main+0xd0>
			irqKey3 = 0;
 440:	e5867004 	str	r7, [r6, #4]

			/* l’affichage des LEDs et des afficheurs 7 segments subit une rotation à gauche */
			led_tmp = AXI_LEDS & 0x200;
 444:	e5932100 	ldr	r2, [r3, #256]	; 0x100
			AXI_LEDS = (AXI_LEDS << 1) | (led_tmp >> 9);
 448:	e5938100 	ldr	r8, [r3, #256]	; 0x100
 44c:	e7e024d2 	ubfx	r2, r2, #9, #1
 450:	e1822088 	orr	r2, r2, r8, lsl #1
 454:	e5832100 	str	r2, [r3, #256]	; 0x100
			
			Seg_tmp = AXI_HEX5;
 458:	e5932450 	ldr	r2, [r3, #1104]	; 0x450
			AXI_HEX5 = AXI_HEX4;
 45c:	e5938440 	ldr	r8, [r3, #1088]	; 0x440
 460:	e5838450 	str	r8, [r3, #1104]	; 0x450
			AXI_HEX4 = AXI_HEX3;
 464:	e5938430 	ldr	r8, [r3, #1072]	; 0x430
 468:	e5838440 	str	r8, [r3, #1088]	; 0x440
			AXI_HEX3 = AXI_HEX2;
 46c:	e5938420 	ldr	r8, [r3, #1056]	; 0x420
 470:	e5838430 	str	r8, [r3, #1072]	; 0x430
			AXI_HEX2 = AXI_HEX1;
 474:	e5938410 	ldr	r8, [r3, #1040]	; 0x410
 478:	e5838420 	str	r8, [r3, #1056]	; 0x420
			AXI_HEX1 = AXI_HEX0;
 47c:	e5938400 	ldr	r8, [r3, #1024]	; 0x400
 480:	e5838410 	str	r8, [r3, #1040]	; 0x410
			AXI_HEX0 = Seg_tmp;
 484:	e5832400 	str	r2, [r3, #1024]	; 0x400
 488:	eaffffa7 	b	32c <main+0xd0>

0000048c <pushbutton_ISR>:

/* Routine d'interruption */
void pushbutton_ISR(void){
	static int i = 0;
	/* Lecture et acquitement des interruptions */
	int src_irq = AXI_INT_SRC;
 48c:	e3a03000 	mov	r3, #0
 490:	e34f3f20 	movt	r3, #65312	; 0xff20
 494:	e5933204 	ldr	r3, [r3, #516]	; 0x204
	
	// Key2
	if (src_irq & 0x04) {
 498:	e3130004 	tst	r3, #4
		irqKey2 = 1;
 49c:	13002edc 	movwne	r2, #3804	; 0xedc
 4a0:	13402000 	movtne	r2, #0
 4a4:	13a01001 	movne	r1, #1
 4a8:	15821000 	strne	r1, [r2]
	} 
	
	// Key3
	if (src_irq & 0x08) {
 4ac:	e3130008 	tst	r3, #8
		//AXI_HEX4 = 0xF9;
		irqKey3 = 1;
 4b0:	13003edc 	movwne	r3, #3804	; 0xedc
 4b4:	13403000 	movtne	r3, #0
 4b8:	13a02001 	movne	r2, #1
 4bc:	15832004 	strne	r2, [r3, #4]
	} 
	
	// Tous les 6 interruptions, change le masque des key 2 et 3
	if (i++ % 6 == 0){
 4c0:	e3002edc 	movw	r2, #3804	; 0xedc
 4c4:	e3402000 	movt	r2, #0
 4c8:	e5923008 	ldr	r3, [r2, #8]
 4cc:	e2831001 	add	r1, r3, #1
 4d0:	e5821008 	str	r1, [r2, #8]
 4d4:	e30a2aab 	movw	r2, #43691	; 0xaaab
 4d8:	e3422aaa 	movt	r2, #10922	; 0x2aaa
 4dc:	e0c21392 	smull	r1, r2, r2, r3
 4e0:	e0422fc3 	sub	r2, r2, r3, asr #31
 4e4:	e0822082 	add	r2, r2, r2, lsl #1
 4e8:	e1530082 	cmp	r3, r2, lsl #1
		AXI_INT_MASK = AXI_INT_MASK ^ (KEY3 | KEY2);
 4ec:	03a03000 	moveq	r3, #0
 4f0:	034f3f20 	movteq	r3, #65312	; 0xff20
 4f4:	05932208 	ldreq	r2, [r3, #520]	; 0x208
 4f8:	0222200c 	eoreq	r2, r2, #12
 4fc:	05832208 	streq	r2, [r3, #520]	; 0x208
 500:	e12fff1e 	bx	lr

00000504 <__cs3_isr_irq>:

// Référence : Exemple dans Using The ARM Generic

// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq(void)
{
 504:	e24ee004 	sub	lr, lr, #4
 508:	e92d500f 	push	{r0, r1, r2, r3, r12, lr}
	/***********
	 * Attention dans Qsys mettre sur flanc et non level !
	 **********/
	 
	// Read CPU Interface registers to determine which peripheral has caused an interrupt 
	int interrupt_ID =*((int*) 0xFFFEC10C);
 50c:	e3e03a13 	mvn	r3, #77824	; 0x13000
	
	// Handle the interrupt if it comes from the KEYs
	if (interrupt_ID == 72) {
 510:	e5133ef3 	ldr	r3, [r3, #-3827]	; 0xfffff10d
 514:	e3530048 	cmp	r3, #72	; 0x48
 518:	1a000004 	bne	530 <__cs3_isr_irq+0x2c>
		pushbutton_ISR();
 51c:	ebffffda 	bl	48c <pushbutton_ISR>
	} else {
		while (1);                     // if unexpected, then stay here
	}

	// Clear interrupt from the CPU Interface
	*((int*) 0xFFFEC110) = interrupt_ID;
 520:	e3a02048 	mov	r2, #72	; 0x48
 524:	e3e03a13 	mvn	r3, #77824	; 0x13000
 528:	e5032eef 	str	r2, [r3, #-3823]	; 0xfffff111
 52c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, r12, pc}^
 530:	eafffffe 	b	530 <__cs3_isr_irq+0x2c>

00000534 <__cs3_reset>:
	return;
} 

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset (void)
{
 534:	eafffffe 	b	534 <__cs3_reset>

00000538 <__cs3_isr_undef>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
 538:	eafffffe 	b	538 <__cs3_isr_undef>

0000053c <__cs3_isr_swi>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
 53c:	eafffffe 	b	53c <__cs3_isr_swi>

00000540 <__cs3_isr_pabort>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
 540:	eafffffe 	b	540 <__cs3_isr_pabort>

00000544 <__cs3_isr_dabort>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
 544:	eafffffe 	b	544 <__cs3_isr_dabort>

00000548 <__cs3_isr_fiq>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
 548:	eafffffe 	b	548 <__cs3_isr_fiq>

0000054c <set_A9_IRQ_stack>:
{
	uint32_t stack, mode;
	stack = A9_ONCHIP_END - 7;		// top of A9 onchip memory, aligned to 8 bytes
	/* change processor to IRQ mode with interrupts disabled */
	mode = INT_DISABLE | IRQ_MODE;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
 54c:	e3a030d2 	mov	r3, #210	; 0xd2
 550:	e129f003 	msr	CPSR_fc, r3
	/* set banked stack pointer */
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
 554:	e3e03007 	mvn	r3, #7
 558:	e1a0d003 	mov	sp, r3

	/* go back to SVC mode before executing subroutine return! */
	mode = INT_DISABLE | SVC_MODE;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
 55c:	e3a030d3 	mov	r3, #211	; 0xd3
 560:	e129f003 	msr	CPSR_fc, r3
 564:	e12fff1e 	bx	lr

00000568 <enable_A9_interrupts>:
 * Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void)
{
	uint32_t status = SVC_MODE | INT_ENABLE;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
 568:	e3a03053 	mov	r3, #83	; 0x53
 56c:	e129f003 	msr	CPSR_fc, r3
 570:	e12fff1e 	bx	lr

00000574 <disable_A9_interrupts>:
}

/** Turn off interrupts in the ARM processor*/
void disable_A9_interrupts(void) { 
	int status = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
 574:	e3a030d3 	mov	r3, #211	; 0xd3
 578:	e129f003 	msr	CPSR_fc, r3
 57c:	e12fff1e 	bx	lr

00000580 <config_KEYs>:
}

void config_KEYs (void) {
	volatile int*KEY_ptr = (int*) 0xFF200050;   // KEY base address
	
	*(KEY_ptr + 2) = 0xF;    // enable interrupts for all four KEYs
 580:	e3a03000 	mov	r3, #0
 584:	e34f3f20 	movt	r3, #65312	; 0xff20
 588:	e3a0200f 	mov	r2, #15
 58c:	e5832058 	str	r2, [r3, #88]	; 0x58
 590:	e12fff1e 	bx	lr

00000594 <config_interrupt>:
	
}

void config_interrupt (int N, int CPU_target) {
 594:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	int reg_offset, index, value, address;
	
	/*Configure the Interrupt Set-Enable Registers (ICDISERn).
	 *reg_offset = (integer_div(N / 32)*4; value = 1 << (N mod 32)*/
	
	reg_offset = (N >> 3) & 0xFFFFFFFC;
 598:	e1a031c0 	asr	r3, r0, #3
 59c:	e3c33003 	bic	r3, r3, #3
	index = N & 0x1F;
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
 5a0:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
	
	/*Configure the Interrupt Set-Enable Registers (ICDISERn).
	 *reg_offset = (integer_div(N / 32)*4; value = 1 << (N mod 32)*/
	
	reg_offset = (N >> 3) & 0xFFFFFFFC;
	index = N & 0x1F;
 5a4:	e200201f 	and	r2, r0, #31
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
	
	/*Using the address and value, set the appropriate bit*/
	*(int*)address |= value;
 5a8:	e513c300 	ldr	r12, [r3, #-768]	; 0xfffffd00
 5ac:	e3a04001 	mov	r4, #1
 5b0:	e18c2214 	orr	r2, r12, r4, lsl r2
 5b4:	e5032300 	str	r2, [r3, #-768]	; 0xfffffd00
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = 0xFFFED800 + reg_offset + index;
	
	/*Using the address and value, write to (only) the appropriate byte*/
	*(char*)address = (char) CPU_target;
 5b8:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
 5bc:	e5c01000 	strb	r1, [r0]
}
 5c0:	e8bd0010 	ldmfd	sp!, {r4}
 5c4:	e12fff1e 	bx	lr

000005c8 <config_GIC>:
void disable_A9_interrupts(void) { 
	int status = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
}

void config_GIC (void) {
 5c8:	e92d4008 	push	{r3, lr}
	 // configure the FPGA KEYs interrupt (72)
	config_interrupt (72, 1); 
 5cc:	e3a00048 	mov	r0, #72	; 0x48
 5d0:	e3a01001 	mov	r1, #1
 5d4:	ebffffee 	bl	594 <config_interrupt>
	
	// Set Interrupt Priority Mask Register (ICCPMR). Enable all priorities
	*((int*) 0xFFFEC104) = 0xFFFF;
 5d8:	e3e02a13 	mvn	r2, #77824	; 0x13000
 5dc:	e30f3fff 	movw	r3, #65535	; 0xffff
 5e0:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105
	
	// Set the enable in the CPU Interface Control Register (ICCICR)
	*((int*) 0xFFFEC100) = 1;
 5e4:	e3a03001 	mov	r3, #1
 5e8:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101
	
	// Set the enable in the Distributor Control Register (ICDDCR)
	*((int*) 0xFFFED000) = 1;
 5ec:	e3e02a12 	mvn	r2, #73728	; 0x12000
 5f0:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
 5f4:	e8bd8008 	pop	{r3, pc}

000005f8 <atexit>:
 5f8:	e1a01000 	mov	r1, r0
 5fc:	e3a00000 	mov	r0, #0
 600:	e92d4008 	push	{r3, lr}
 604:	e1a02000 	mov	r2, r0
 608:	e1a03000 	mov	r3, r0
 60c:	eb00000e 	bl	64c <__register_exitproc>
 610:	e8bd4008 	pop	{r3, lr}
 614:	e12fff1e 	bx	lr

00000618 <exit>:
 618:	e92d4008 	push	{r3, lr}
 61c:	e3a01000 	mov	r1, #0
 620:	e1a04000 	mov	r4, r0
 624:	eb000045 	bl	740 <__call_exitprocs>
 628:	e59f3018 	ldr	r3, [pc, #24]	; 648 <exit+0x30>
 62c:	e5930000 	ldr	r0, [r3]
 630:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 634:	e3530000 	cmp	r3, #0
 638:	11a0e00f 	movne	lr, pc
 63c:	112fff13 	bxne	r3
 640:	e1a00004 	mov	r0, r4
 644:	eb0000c9 	bl	970 <_exit>
 648:	00000a28 	.word	0x00000a28

0000064c <__register_exitproc>:
 64c:	e59fc0e4 	ldr	r12, [pc, #228]	; 738 <__register_exitproc+0xec>
 650:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 654:	e59c4000 	ldr	r4, [r12]
 658:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 65c:	e35c0000 	cmp	r12, #0
 660:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 664:	e59c5004 	ldr	r5, [r12, #4]
 668:	0584c148 	streq	r12, [r4, #328]	; 0x148
 66c:	e355001f 	cmp	r5, #31
 670:	e24dd010 	sub	sp, sp, #16
 674:	e1a06000 	mov	r6, r0
 678:	da000015 	ble	6d4 <__register_exitproc+0x88>
 67c:	e59f00b8 	ldr	r0, [pc, #184]	; 73c <__register_exitproc+0xf0>
 680:	e3500000 	cmp	r0, #0
 684:	1a000001 	bne	690 <__register_exitproc+0x44>
 688:	e3e00000 	mvn	r0, #0
 68c:	ea000018 	b	6f4 <__register_exitproc+0xa8>
 690:	e3a00e19 	mov	r0, #400	; 0x190
 694:	e58d100c 	str	r1, [sp, #12]
 698:	e58d2008 	str	r2, [sp, #8]
 69c:	e58d3004 	str	r3, [sp, #4]
 6a0:	e320f000 	nop	{0}
 6a4:	e250c000 	subs	r12, r0, #0
 6a8:	e59d100c 	ldr	r1, [sp, #12]
 6ac:	e59d2008 	ldr	r2, [sp, #8]
 6b0:	e59d3004 	ldr	r3, [sp, #4]
 6b4:	0afffff3 	beq	688 <__register_exitproc+0x3c>
 6b8:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 6bc:	e3a00000 	mov	r0, #0
 6c0:	e58c0004 	str	r0, [r12, #4]
 6c4:	e58c5000 	str	r5, [r12]
 6c8:	e584c148 	str	r12, [r4, #328]	; 0x148
 6cc:	e58c0188 	str	r0, [r12, #392]	; 0x188
 6d0:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 6d4:	e3560000 	cmp	r6, #0
 6d8:	e59c4004 	ldr	r4, [r12, #4]
 6dc:	1a000007 	bne	700 <__register_exitproc+0xb4>
 6e0:	e2843002 	add	r3, r4, #2
 6e4:	e2844001 	add	r4, r4, #1
 6e8:	e78c1103 	str	r1, [r12, r3, lsl #2]
 6ec:	e58c4004 	str	r4, [r12, #4]
 6f0:	e3a00000 	mov	r0, #0
 6f4:	e28dd010 	add	sp, sp, #16
 6f8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 6fc:	e12fff1e 	bx	lr
 700:	e3a00001 	mov	r0, #1
 704:	e1a00410 	lsl	r0, r0, r4
 708:	e08c8104 	add	r8, r12, r4, lsl #2
 70c:	e3560002 	cmp	r6, #2
 710:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 714:	e5883108 	str	r3, [r8, #264]	; 0x108
 718:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 71c:	e1877000 	orr	r7, r7, r0
 720:	01830000 	orreq	r0, r3, r0
 724:	e1a05008 	mov	r5, r8
 728:	e5882088 	str	r2, [r8, #136]	; 0x88
 72c:	e58c7188 	str	r7, [r12, #392]	; 0x188
 730:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 734:	eaffffe9 	b	6e0 <__register_exitproc+0x94>
 738:	00000a28 	.word	0x00000a28
 73c:	00000000 	.word	0x00000000

00000740 <__call_exitprocs>:
 740:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 744:	e59f3168 	ldr	r3, [pc, #360]	; 8b4 <__call_exitprocs+0x174>
 748:	e5933000 	ldr	r3, [r3]
 74c:	e24dd014 	sub	sp, sp, #20
 750:	e58d3004 	str	r3, [sp, #4]
 754:	e2833f52 	add	r3, r3, #328	; 0x148
 758:	e58d0008 	str	r0, [sp, #8]
 75c:	e58d300c 	str	r3, [sp, #12]
 760:	e1a07001 	mov	r7, r1
 764:	e3a08001 	mov	r8, #1
 768:	e59d3004 	ldr	r3, [sp, #4]
 76c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 770:	e3560000 	cmp	r6, #0
 774:	e59db00c 	ldr	r11, [sp, #12]
 778:	0a000033 	beq	84c <__call_exitprocs+0x10c>
 77c:	e5965004 	ldr	r5, [r6, #4]
 780:	e2554001 	subs	r4, r5, #1
 784:	5286a088 	addpl	r10, r6, #136	; 0x88
 788:	5285501f 	addpl	r5, r5, #31
 78c:	508a5105 	addpl	r5, r10, r5, lsl #2
 790:	5a000007 	bpl	7b4 <__call_exitprocs+0x74>
 794:	ea000029 	b	840 <__call_exitprocs+0x100>
 798:	e5953000 	ldr	r3, [r5]
 79c:	e1530007 	cmp	r3, r7
 7a0:	0a000005 	beq	7bc <__call_exitprocs+0x7c>
 7a4:	e2444001 	sub	r4, r4, #1
 7a8:	e3740001 	cmn	r4, #1
 7ac:	e2455004 	sub	r5, r5, #4
 7b0:	0a000022 	beq	840 <__call_exitprocs+0x100>
 7b4:	e3570000 	cmp	r7, #0
 7b8:	1afffff6 	bne	798 <__call_exitprocs+0x58>
 7bc:	e5963004 	ldr	r3, [r6, #4]
 7c0:	e06a2005 	rsb	r2, r10, r5
 7c4:	e2433001 	sub	r3, r3, #1
 7c8:	e0862002 	add	r2, r6, r2
 7cc:	e1530004 	cmp	r3, r4
 7d0:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 7d4:	13a01000 	movne	r1, #0
 7d8:	05864004 	streq	r4, [r6, #4]
 7dc:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 7e0:	e3530000 	cmp	r3, #0
 7e4:	0affffee 	beq	7a4 <__call_exitprocs+0x64>
 7e8:	e1a02418 	lsl	r2, r8, r4
 7ec:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 7f0:	e1120001 	tst	r2, r1
 7f4:	e5969004 	ldr	r9, [r6, #4]
 7f8:	0a000016 	beq	858 <__call_exitprocs+0x118>
 7fc:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 800:	e1120001 	tst	r2, r1
 804:	1a000016 	bne	864 <__call_exitprocs+0x124>
 808:	e59d0008 	ldr	r0, [sp, #8]
 80c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 810:	e1a0e00f 	mov	lr, pc
 814:	e12fff13 	bx	r3
 818:	e5963004 	ldr	r3, [r6, #4]
 81c:	e1530009 	cmp	r3, r9
 820:	1affffd0 	bne	768 <__call_exitprocs+0x28>
 824:	e59b3000 	ldr	r3, [r11]
 828:	e1530006 	cmp	r3, r6
 82c:	1affffcd 	bne	768 <__call_exitprocs+0x28>
 830:	e2444001 	sub	r4, r4, #1
 834:	e3740001 	cmn	r4, #1
 838:	e2455004 	sub	r5, r5, #4
 83c:	1affffdc 	bne	7b4 <__call_exitprocs+0x74>
 840:	e59f1070 	ldr	r1, [pc, #112]	; 8b8 <__call_exitprocs+0x178>
 844:	e3510000 	cmp	r1, #0
 848:	1a000009 	bne	874 <__call_exitprocs+0x134>
 84c:	e28dd014 	add	sp, sp, #20
 850:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 854:	e12fff1e 	bx	lr
 858:	e1a0e00f 	mov	lr, pc
 85c:	e12fff13 	bx	r3
 860:	eaffffec 	b	818 <__call_exitprocs+0xd8>
 864:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 868:	e1a0e00f 	mov	lr, pc
 86c:	e12fff13 	bx	r3
 870:	eaffffe8 	b	818 <__call_exitprocs+0xd8>
 874:	e5963004 	ldr	r3, [r6, #4]
 878:	e3530000 	cmp	r3, #0
 87c:	e5963000 	ldr	r3, [r6]
 880:	1a000008 	bne	8a8 <__call_exitprocs+0x168>
 884:	e3530000 	cmp	r3, #0
 888:	0a000006 	beq	8a8 <__call_exitprocs+0x168>
 88c:	e1a00006 	mov	r0, r6
 890:	e58b3000 	str	r3, [r11]
 894:	e320f000 	nop	{0}
 898:	e59b6000 	ldr	r6, [r11]
 89c:	e3560000 	cmp	r6, #0
 8a0:	1affffb5 	bne	77c <__call_exitprocs+0x3c>
 8a4:	eaffffe8 	b	84c <__call_exitprocs+0x10c>
 8a8:	e1a0b006 	mov	r11, r6
 8ac:	e1a06003 	mov	r6, r3
 8b0:	eafffff9 	b	89c <__call_exitprocs+0x15c>
 8b4:	00000a28 	.word	0x00000a28
 8b8:	00000000 	.word	0x00000000

000008bc <register_fini>:
 8bc:	e92d4008 	push	{r3, lr}
 8c0:	e59f3010 	ldr	r3, [pc, #16]	; 8d8 <register_fini+0x1c>
 8c4:	e3530000 	cmp	r3, #0
 8c8:	159f000c 	ldrne	r0, [pc, #12]	; 8dc <register_fini+0x20>
 8cc:	1bffff49 	blne	5f8 <atexit>
 8d0:	e8bd4008 	pop	{r3, lr}
 8d4:	e12fff1e 	bx	lr
 8d8:	00000a50 	.word	0x00000a50
 8dc:	000008e0 	.word	0x000008e0

000008e0 <__libc_fini_array>:
 8e0:	e92d4038 	push	{r3, r4, r5, lr}
 8e4:	e59f5030 	ldr	r5, [pc, #48]	; 91c <__libc_fini_array+0x3c>
 8e8:	e59f4030 	ldr	r4, [pc, #48]	; 920 <__libc_fini_array+0x40>
 8ec:	e0654004 	rsb	r4, r5, r4
 8f0:	e1b04144 	asrs	r4, r4, #2
 8f4:	10855104 	addne	r5, r5, r4, lsl #2
 8f8:	0a000004 	beq	910 <__libc_fini_array+0x30>
 8fc:	e5353004 	ldr	r3, [r5, #-4]!
 900:	e1a0e00f 	mov	lr, pc
 904:	e12fff13 	bx	r3
 908:	e2544001 	subs	r4, r4, #1
 90c:	1afffffa 	bne	8fc <__libc_fini_array+0x1c>
 910:	eb00004e 	bl	a50 <__libc_fini>
 914:	e8bd4038 	pop	{r3, r4, r5, lr}
 918:	e12fff1e 	bx	lr
 91c:	00000a68 	.word	0x00000a68
 920:	00000a6c 	.word	0x00000a6c

00000924 <__cs3_premain>:
 924:	e92d4008 	push	{r3, lr}
 928:	eb000017 	bl	98c <__libc_init_array>
 92c:	e59f3030 	ldr	r3, [pc, #48]	; 964 <__cs3_premain+0x40>
 930:	e3530000 	cmp	r3, #0
 934:	15930000 	ldrne	r0, [r3]
 938:	01a00003 	moveq	r0, r3
 93c:	e59f3024 	ldr	r3, [pc, #36]	; 968 <__cs3_premain+0x44>
 940:	e3530000 	cmp	r3, #0
 944:	15931000 	ldrne	r1, [r3]
 948:	01a01003 	moveq	r1, r3
 94c:	e3a02000 	mov	r2, #0
 950:	ebfffe41 	bl	25c <main>
 954:	e59f3010 	ldr	r3, [pc, #16]	; 96c <__cs3_premain+0x48>
 958:	e3530000 	cmp	r3, #0
 95c:	1bffff2d 	blne	618 <exit>
 960:	eafffffe 	b	960 <__cs3_premain+0x3c>
	...
 96c:	00000618 	.word	0x00000618

00000970 <_exit>:
 970:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 974:	e3a00018 	mov	r0, #24
 978:	e59f1004 	ldr	r1, [pc, #4]	; 984 <_exit+0x14>
 97c:	ef123456 	svc	0x00123456
 980:	eafffffe 	b	980 <_exit+0x10>
 984:	00020026 	.word	0x00020026

00000988 <__cs3_isr_interrupt>:
 988:	eafffffe 	b	988 <__cs3_isr_interrupt>

0000098c <__libc_init_array>:
 98c:	e92d4070 	push	{r4, r5, r6, lr}
 990:	e59f506c 	ldr	r5, [pc, #108]	; a04 <__libc_init_array+0x78>
 994:	e59f606c 	ldr	r6, [pc, #108]	; a08 <__libc_init_array+0x7c>
 998:	e0656006 	rsb	r6, r5, r6
 99c:	e1b06146 	asrs	r6, r6, #2
 9a0:	12455004 	subne	r5, r5, #4
 9a4:	13a04000 	movne	r4, #0
 9a8:	0a000005 	beq	9c4 <__libc_init_array+0x38>
 9ac:	e5b53004 	ldr	r3, [r5, #4]!
 9b0:	e2844001 	add	r4, r4, #1
 9b4:	e1a0e00f 	mov	lr, pc
 9b8:	e12fff13 	bx	r3
 9bc:	e1560004 	cmp	r6, r4
 9c0:	1afffff9 	bne	9ac <__libc_init_array+0x20>
 9c4:	e59f5040 	ldr	r5, [pc, #64]	; a0c <__libc_init_array+0x80>
 9c8:	e59f6040 	ldr	r6, [pc, #64]	; a10 <__libc_init_array+0x84>
 9cc:	e0656006 	rsb	r6, r5, r6
 9d0:	eb000016 	bl	a30 <_init>
 9d4:	e1b06146 	asrs	r6, r6, #2
 9d8:	12455004 	subne	r5, r5, #4
 9dc:	13a04000 	movne	r4, #0
 9e0:	0a000005 	beq	9fc <__libc_init_array+0x70>
 9e4:	e5b53004 	ldr	r3, [r5, #4]!
 9e8:	e2844001 	add	r4, r4, #1
 9ec:	e1a0e00f 	mov	lr, pc
 9f0:	e12fff13 	bx	r3
 9f4:	e1560004 	cmp	r6, r4
 9f8:	1afffff9 	bne	9e4 <__libc_init_array+0x58>
 9fc:	e8bd4070 	pop	{r4, r5, r6, lr}
 a00:	e12fff1e 	bx	lr
 a04:	00000a48 	.word	0x00000a48
 a08:	00000a48 	.word	0x00000a48
 a0c:	00000a48 	.word	0x00000a48
 a10:	00000a50 	.word	0x00000a50

Disassembly of section .rodata:

00000a18 <_global_impure_ptr-0x10>:
 a18:	3024f940 	.word	0x3024f940
 a1c:	f8021219 	.word	0xf8021219
 a20:	03081000 	.word	0x03081000
 a24:	0e062127 	.word	0x0e062127

00000a28 <_global_impure_ptr>:
 a28:	00000a90 00000043                       ....C...

00000a30 <_init>:
 a30:	e1a0c00d 	mov	r12, sp
 a34:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 a38:	e24cb004 	sub	r11, r12, #4
 a3c:	e24bd028 	sub	sp, r11, #40	; 0x28
 a40:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 a44:	e12fff1e 	bx	lr

00000a48 <__init_array_start>:
 a48:	000008bc 	.word	0x000008bc

00000a4c <__frame_dummy_init_array_entry>:
 a4c:	00000208                                ....

00000a50 <__libc_fini>:
 a50:	e1a0c00d 	mov	r12, sp
 a54:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 a58:	e24cb004 	sub	r11, r12, #4
 a5c:	e24bd028 	sub	sp, r11, #40	; 0x28
 a60:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 a64:	e12fff1e 	bx	lr

00000a68 <__fini_array_start>:
 a68:	000001c4 	.word	0x000001c4

00000a6c <__cs3_regions>:
 a6c:	00000000 	.word	0x00000000
 a70:	00000040 	.word	0x00000040
 a74:	00000040 	.word	0x00000040
 a78:	00000e80 	.word	0x00000e80
 a7c:	00000028 	.word	0x00000028
